import re
import bleach
from django.db import models
from django.utils.html import format_html
from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType



class Artist(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    name = models.CharField("–ò–º—è", max_length=255)
    photo = models.ImageField("–§–æ—Ç–æ", upload_to="artists/", blank=True, null=True)
    birth_year = models.IntegerField("–ì–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è", blank=True, null=True)
    death_year = models.IntegerField("–ì–æ–¥ —Å–º–µ—Ä—Ç–∏", blank=True, null=True)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    photoAuthor = models.CharField("–ê–≤—Ç–æ—Ä —Ñ–æ—Ç–æ", max_length=255)
    textAuthor = models.CharField("–ê–≤—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞", max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–∞
    def get_artworks(self):
        return self.artworks.all()

    def preview_image(self):
        if self.photo:
            return format_html('<img src="{}" style="max-height: 100px;"/>', self.photo.url)
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
    
    def save(self, *args, **kwargs):
        if self.description:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ <div> –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
            self.description = self.description.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
            self.description = self.description.lstrip('<div>').rstrip('</div>')  # –£–±–∏—Ä–∞–µ–º <div> –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º bleach –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
            self.description = bleach.clean(self.description, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)

            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, <br> –∏–ª–∏ <p>)
            self.description = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.description)  # –£–±–∏—Ä–∞–µ–º —Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ

        super().save(*args, **kwargs)

    class Meta:
        verbose_name = "—Ö–æ–¥–æ–∂–Ω–∏–∫–∞"
        verbose_name_plural = "üßë‚Äçüé®Ô∏è –•–æ–¥–æ–∂–Ω–∏–∫–∏"

    def __str__(self):
        return self.name

class Artwork(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    main_image = models.ImageField("–ì–ª–∞–≤–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", upload_to='artworks/main_images/', blank=True, null=True)
    title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    artist = models.ForeignKey("Artist", on_delete=models.CASCADE, related_name="artworks")
    series = models.CharField("–°–µ—Ä–∏—è", max_length=255)
    description = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    year = models.IntegerField("–ì–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è", blank=True, null=True)
    technique = models.CharField("–¢–µ—Ö–Ω–∏–∫–∞", blank=True, null=True)
    size = models.CharField("–†–∞–∑–º–µ—Ä", blank=True, null=True)
    cipher = models.CharField("–®–∏—Ñ—Ä", blank=True, null=True)
    provenance = models.CharField("–ü—Ä–æ–≤–µ–Ω–∞–Ω—Å", blank=True, null=True)
    exhibitions = models.CharField("–°–ø–∏—Å–æ–∫ –≤—ã—Å—Ç–∞–≤–æ–∫", blank=True, null=True)
    publications = models.CharField("–ü—É–±–ª–∏–∫–∞—Ü–∏–∏", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def preview_images(self):
        images = self.artwork_images.all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if images.exists():
            return format_html(
                ''.join(f'<img src="{img.image.url}" style="max-height: 100px; margin:5px;"/>' for img in images[:3])
            )
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    preview_images.short_description = "–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"

    class Meta:
        verbose_name = "–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
        verbose_name_plural = "üé® –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if self.description:
            self.description = self.description.strip()
            self.description = self.description.lstrip('<div>').rstrip('</div>')
            self.description = bleach.clean(self.description, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)
            self.description = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.description)  
        super().save(*args, **kwargs)

class Exhibition(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    is_own = models.BooleanField("–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –≤—ã—Å—Ç–∞–≤–∫–∞", default=False)
    image = models.ImageField("–ü—Ä–µ–≤—å—é –≤—ã—Å—Ç–∞–≤–∫–∏", upload_to="routes/", blank=True, null=True)
    title = models.CharField(max_length=255)
    text = models.TextField("–û–ø–∏—Å–∞–Ω–∏–µ")
    start_date = models.DateField()
    end_date = models.DateField()
    location = models.CharField(max_length=255)
    curators = models.CharField()
    catalog_pdf = models.FileField(upload_to='exhibitions/catalogs/', blank=True, null=True)
    press_kit_zip = models.FileField(upload_to='exhibitions/press_kits/', blank=True, null=True)
    artworks = models.ManyToManyField("Artwork", verbose_name="–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç", blank=True)

    class Meta:
        verbose_name = "–≤—ã—Å—Ç–∞–≤–∫–∞"
        verbose_name_plural = "üè∫ –í—ã—Å—Ç–∞–≤–∫–∏"

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if self.text:
            self.text = self.text.strip()
            self.text = self.text.lstrip('<div>').rstrip('</div>')
            self.text = bleach.clean(self.text, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)
            self.text = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.text)  
        super().save(*args, **kwargs)

class YearPeriod(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    title = models.CharField(max_length=255)
    text = models.TextField("–ú–µ—Å—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è")
    artworks = models.ManyToManyField("Artwork", verbose_name="–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç", blank=True)

    class Meta:
        verbose_name = "–≥–æ–¥"
        verbose_name_plural = "üìÖ –ì–æ–¥—ã"

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if self.text:
            self.text = self.text.strip()
            self.text = self.text.lstrip('<div>').rstrip('</div>')
            self.text = bleach.clean(self.text, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)
            self.text = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.text)  
        super().save(*args, **kwargs)

class PressMention(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    title = models.CharField("–ó–∞–≥–æ–ª–æ–≤–æ–∫", max_length=255)
    link = models.URLField("–°—Å—ã–ª–∫–∞")
    image = models.ImageField("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", upload_to="press_mentions/", blank=True, null=True)
    author = models.CharField("–ê–≤—Ç–æ—Ä", max_length=255)
    source = models.CharField("–ò–∑–¥–∞–Ω–∏–µ", max_length=255)
    date = models.CharField("–î–∞—Ç–∞", max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def preview_image(self):
        if self.image:
            return format_html('<img src="{}" style="max-height: 100px;"/>', self.image.url)
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    preview_image.short_description = "–ü—Ä–µ–≤—å—é"
    
    class Meta:
        verbose_name = "—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ø—Ä–µ—Å—Å–µ"
        verbose_name_plural = "üì∞ –ü—Ä–µ—Å—Å–∞"

    def __str__(self):
        return self.title


class Route(models.Model):
    title = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞", max_length=255, default="–ú–∞—Ä—à—Ä—É—Ç")
    short_description = models.CharField("–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", max_length=500, blank=True, null=True)
    image = models.ImageField("–ü—Ä–µ–≤—å—é –º–∞—Ä—à—Ä—É—Ç–∞", upload_to="routes/", blank=True, null=True)
    color = models.CharField("–¶–≤–µ—Ç", max_length=7, default="#FFFFFF")  # HEX-–∫–æ–¥ —Ü–≤–µ—Ç–∞
    artworks = models.ManyToManyField("Artwork", verbose_name="–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç", blank=True)
    # videos = models.ManyToManyField(RouteVideo, blank=True, related_name='routes')
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    full_description = models.TextField("–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", blank=True, null=True)
    article = models.TextField("–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏", blank=True, null=True)

    def preview_image(self):
        if self.image:
            return format_html('<img src="{}" style="max-height: 100px;"/>', self.image.url)
        return "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    preview_image.short_description = "–ü—Ä–µ–≤—å—é"

    class Meta:
        verbose_name = "–º–∞—Ä—à—Ä—É—Ç"
        verbose_name_plural = "üìç –ú–∞—Ä—à—Ä—É—Ç—ã"

    def __str__(self):
        return self.title

class ArtworkImage(models.Model):
    artwork = models.ForeignKey(Artwork, on_delete=models.CASCADE, related_name="artwork_images")
    image = models.ImageField(upload_to='artworks/images/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "—ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def __str__(self):
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.artwork.title}"
    
# –°—É—â–Ω–æ—Å—Ç—å PDF-—Ñ–∞–π–ª–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
class ArtistPDF(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    artist = models.ForeignKey(Artist, on_delete=models.CASCADE, related_name="artist_pdfs")
    title = models.CharField(max_length=255)
    file = models.FileField(upload_to='artistPDFs/')
    uploaded_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        verbose_name = "PDF"
        verbose_name_plural = "üìÉ PDF –∞–≤—Ç–æ—Ä–æ–≤"

    def __str__(self):
        return self.title

# –°—É—â–Ω–æ—Å—Ç—å YouTube-–≤–∏–¥–µ–æ –¥–ª—è –∞–≤—Ç–æ—Ä–∞
class ArtistVideo(models.Model):
    is_visible = models.BooleanField("–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ", default=True)
    artist = models.ForeignKey(Artist, on_delete=models.CASCADE, related_name="artist_videos")
    title = models.CharField(max_length=255)
    url = models.URLField()
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–í–∏–¥–µ–æ"
        verbose_name_plural = "üé• –í–∏–¥–µ–æ –∞–≤—Ç–æ—Ä–æ–≤"
    
    def __str__(self):
        return self.title
    
# –°—É—â–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
class RouteVideo(models.Model):
    route = models.ForeignKey(Route, on_delete=models.CASCADE, related_name="route_videos")
    title = models.CharField(max_length=255)
    url = models.URLField()
    image = models.ImageField("–ü—Ä–µ–≤—å—é –≤–∏–¥–µ–æ", upload_to="routesVideos/", blank=True, null=True)

    class Meta:
        verbose_name = "–≤–∏–¥–µ–æ –º–∞—Ä—à—Ä—É—Ç–∞"
        verbose_name_plural = "–í–∏–¥–µ–æ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞"

    def __str__(self):
        return self.title
    
class ExhibitionPDFImage(models.Model):
    exhibition = models.ForeignKey(Exhibition, on_delete=models.CASCADE, related_name="exhibition_pdf_images")
    image = models.ImageField(upload_to='exhibitionPDFImages/images/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "–ø—Ä–µ–≤—å—é PDF –¥–ª—è –≤—ã—Å—Ç–∞–≤–∫–∏"
        verbose_name_plural = "PDF"

    def __str__(self):
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.artwork.title}"
    
class ExhibitionImage(models.Model):
    exhibition = models.ForeignKey(Exhibition, on_delete=models.CASCADE, related_name="artwork_images")
    image = models.ImageField(upload_to='artworks/images/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "—ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        verbose_name_plural = "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

    def __str__(self):
        return f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è {self.exhibition.title}"

# –ú–æ–¥–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
class Employee(models.Model):
    name = models.CharField(max_length=255)
    position = models.CharField(max_length=255)
    image = models.ImageField(upload_to='employees/', blank=True, null=True)

    class Meta:
        verbose_name = "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
        verbose_name_plural = "üßë‚ÄçüíªÔ∏è –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"

    def __str__(self):
        return self.name

# –ú–æ–¥–µ–ª—å –ø–æ—á—Ç–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
class PostalLink(models.Model):
    title = models.CharField(max_length=255)
    image = models.ImageField(upload_to='postal_links/', blank=True, null=True)
    description = models.TextField()
    email = models.EmailField()

    class Meta:
        verbose_name = "–ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å"
        verbose_name_plural = "üì™ –ü–æ—á—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞"

    def __str__(self):
        return self.title
    
    def save(self, *args, **kwargs):
        if self.description:
            self.description = self.description.strip()
            self.description = self.description.lstrip('<div>').rstrip('</div>')
            self.description = bleach.clean(self.description, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)
            self.description = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.description)  
        super().save(*args, **kwargs)

# –ú–æ–¥–µ–ª—å Flow —Å–æ–±—ã—Ç–∏—è
class FlowEvent(models.Model):
    photo = models.ImageField(upload_to='flow_events/', blank=True, null=True)
    text = models.TextField("–¢–µ–∫—Å—Ç")

    class Meta:
        verbose_name = "—ç–ª–µ–º–µ–Ω—Ç Flow"
        verbose_name_plural = "üì∏ Flow (–°—É–µ—Ç–∞)"

    def __str__(self):
        return self.text[:50]
    
    def save(self, *args, **kwargs):
        if self.text:
            self.text = self.text.strip()
            self.text = self.text.lstrip('<div>').rstrip('</div>')
            self.text = bleach.clean(self.text, tags=['br', 'em', 'strong', 'p', 'div'], strip=True)
            self.text = re.sub(r'(<br\s*/?>|<p>|</p>)$', '', self.text)  
        super().save(*args, **kwargs)

